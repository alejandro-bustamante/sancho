// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: download_history.sql

package repository

import (
	"context"
	"database/sql"
)

const insertDownloadHistory = `-- name: InsertDownloadHistory :one
INSERT INTO download_history (
  id, user_id, track_id, quality, 
  status, service, completed_at, error_message
) VALUES (
  ?1, ?2, ?3,
  ?4, ?5, ?6, 
  ?7, ?8
)
RETURNING id, user_id, track_id, quality, status, service, started_at, completed_at, error_message
`

type InsertDownloadHistoryParams struct {
	ID           string         `json:"id"`
	UserID       sql.NullInt64  `json:"user_id"`
	TrackID      sql.NullInt64  `json:"track_id"`
	Quality      sql.NullInt64  `json:"quality"`
	Status       sql.NullString `json:"status"`
	Service      sql.NullString `json:"service"`
	CompletedAt  sql.NullTime   `json:"completed_at"`
	ErrorMessage sql.NullString `json:"error_message"`
}

func (q *Queries) InsertDownloadHistory(ctx context.Context, arg InsertDownloadHistoryParams) (DownloadHistory, error) {
	row := q.queryRow(ctx, q.insertDownloadHistoryStmt, insertDownloadHistory,
		arg.ID,
		arg.UserID,
		arg.TrackID,
		arg.Quality,
		arg.Status,
		arg.Service,
		arg.CompletedAt,
		arg.ErrorMessage,
	)
	var i DownloadHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Quality,
		&i.Status,
		&i.Service,
		&i.StartedAt,
		&i.CompletedAt,
		&i.ErrorMessage,
	)
	return i, err
}

const updateDownloadCompletion = `-- name: UpdateDownloadCompletion :exec
UPDATE download_history
SET completed_at = CURRENT_TIMESTAMP, status = ?1, error_message = ?2
WHERE id = ?3
`

type UpdateDownloadCompletionParams struct {
	Status       sql.NullString `json:"status"`
	ErrorMessage sql.NullString `json:"error_message"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateDownloadCompletion(ctx context.Context, arg UpdateDownloadCompletionParams) error {
	_, err := q.exec(ctx, q.updateDownloadCompletionStmt, updateDownloadCompletion, arg.Status, arg.ErrorMessage, arg.ID)
	return err
}
