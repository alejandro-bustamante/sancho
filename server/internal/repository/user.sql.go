// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, created_at, updated_at, last_login, is_active FROM user
WHERE username = ?1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO user (username, password_hash, email)
VALUES (?1, ?2, ?3)
RETURNING id, username, password_hash, email, created_at, updated_at, last_login, is_active
`

type InsertUserParams struct {
	Username     string         `json:"username"`
	PasswordHash string         `json:"password_hash"`
	Email        sql.NullString `json:"email"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser, arg.Username, arg.PasswordHash, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE user
SET last_login = CURRENT_TIMESTAMP
WHERE id = ?1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.updateLastLoginStmt, updateLastLogin, id)
	return err
}
