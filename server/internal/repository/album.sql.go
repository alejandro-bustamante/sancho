// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: album.sql

package repository

import (
	"context"
	"database/sql"
)

const albumExistsByDeezerID = `-- name: AlbumExistsByDeezerID :one
SELECT EXISTS (
  SELECT 1 FROM album WHERE deezer_id = ?1
)
`

func (q *Queries) AlbumExistsByDeezerID(ctx context.Context, deezerID sql.NullString) (int64, error) {
	row := q.queryRow(ctx, q.albumExistsByDeezerIDStmt, albumExistsByDeezerID, deezerID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const countTracksInAlbum = `-- name: CountTracksInAlbum :one
SELECT COUNT(*) FROM track
WHERE album_id = ?1
`

func (q *Queries) CountTracksInAlbum(ctx context.Context, albumID sql.NullInt64) (int64, error) {
	row := q.queryRow(ctx, q.countTracksInAlbumStmt, countTracksInAlbum, albumID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM album
WHERE id = ?1
`

func (q *Queries) DeleteAlbum(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteAlbumStmt, deleteAlbum, id)
	return err
}

const getAlbumByDeezerID = `-- name: GetAlbumByDeezerID :one
SELECT id, deezer_id, title, normalized_title, artist_id, release_date, album_art_path, genre, total_tracks, created_at FROM album
WHERE deezer_id = ?1
LIMIT 1
`

func (q *Queries) GetAlbumByDeezerID(ctx context.Context, deezerID sql.NullString) (Album, error) {
	row := q.queryRow(ctx, q.getAlbumByDeezerIDStmt, getAlbumByDeezerID, deezerID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.DeezerID,
		&i.Title,
		&i.NormalizedTitle,
		&i.ArtistID,
		&i.ReleaseDate,
		&i.AlbumArtPath,
		&i.Genre,
		&i.TotalTracks,
		&i.CreatedAt,
	)
	return i, err
}

const getAlbumByNormalizedTitleAndArtist = `-- name: GetAlbumByNormalizedTitleAndArtist :one
SELECT id, deezer_id, title, normalized_title, artist_id, release_date, album_art_path, genre, total_tracks, created_at FROM album
WHERE normalized_title = ?1
  AND artist_id = ?2
LIMIT 1
`

type GetAlbumByNormalizedTitleAndArtistParams struct {
	NormalizedTitle string `json:"normalized_title"`
	ArtistID        int64  `json:"artist_id"`
}

func (q *Queries) GetAlbumByNormalizedTitleAndArtist(ctx context.Context, arg GetAlbumByNormalizedTitleAndArtistParams) (Album, error) {
	row := q.queryRow(ctx, q.getAlbumByNormalizedTitleAndArtistStmt, getAlbumByNormalizedTitleAndArtist, arg.NormalizedTitle, arg.ArtistID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.DeezerID,
		&i.Title,
		&i.NormalizedTitle,
		&i.ArtistID,
		&i.ReleaseDate,
		&i.AlbumArtPath,
		&i.Genre,
		&i.TotalTracks,
		&i.CreatedAt,
	)
	return i, err
}

const insertAlbum = `-- name: InsertAlbum :one
INSERT INTO album (
  deezer_id, title, normalized_title, artist_id, release_date,
  album_art_path, genre, total_tracks
) VALUES (
  ?1, ?2, ?3,
  ?4, ?5, ?6,
  ?7, ?8
)
RETURNING id, deezer_id, title, normalized_title, artist_id, release_date, album_art_path, genre, total_tracks, created_at
`

type InsertAlbumParams struct {
	DeezerID        sql.NullString `json:"deezer_id"`
	Title           string         `json:"title"`
	NormalizedTitle string         `json:"normalized_title"`
	ArtistID        int64          `json:"artist_id"`
	ReleaseDate     sql.NullString `json:"release_date"`
	AlbumArtPath    sql.NullString `json:"album_art_path"`
	Genre           sql.NullString `json:"genre"`
	TotalTracks     sql.NullInt64  `json:"total_tracks"`
}

func (q *Queries) InsertAlbum(ctx context.Context, arg InsertAlbumParams) (Album, error) {
	row := q.queryRow(ctx, q.insertAlbumStmt, insertAlbum,
		arg.DeezerID,
		arg.Title,
		arg.NormalizedTitle,
		arg.ArtistID,
		arg.ReleaseDate,
		arg.AlbumArtPath,
		arg.Genre,
		arg.TotalTracks,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.DeezerID,
		&i.Title,
		&i.NormalizedTitle,
		&i.ArtistID,
		&i.ReleaseDate,
		&i.AlbumArtPath,
		&i.Genre,
		&i.TotalTracks,
		&i.CreatedAt,
	)
	return i, err
}
