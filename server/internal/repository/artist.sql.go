// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: artist.sql

package repository

import (
	"context"
	"database/sql"
)

const artistExistsByDeezerID = `-- name: ArtistExistsByDeezerID :one
SELECT EXISTS (
  SELECT 1 FROM artist WHERE deezer_id = ?1
)
`

func (q *Queries) ArtistExistsByDeezerID(ctx context.Context, deezerID sql.NullString) (int64, error) {
	row := q.queryRow(ctx, q.artistExistsByDeezerIDStmt, artistExistsByDeezerID, deezerID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getArtistByDeezerID = `-- name: GetArtistByDeezerID :one
SELECT id, deezer_id, name, normalized_name, created_at FROM artist
WHERE deezer_id = ?1
LIMIT 1
`

func (q *Queries) GetArtistByDeezerID(ctx context.Context, deezerID sql.NullString) (Artist, error) {
	row := q.queryRow(ctx, q.getArtistByDeezerIDStmt, getArtistByDeezerID, deezerID)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.DeezerID,
		&i.Name,
		&i.NormalizedName,
		&i.CreatedAt,
	)
	return i, err
}

const getArtistByNormalizedName = `-- name: GetArtistByNormalizedName :one
SELECT id, deezer_id, name, normalized_name, created_at FROM artist
WHERE normalized_name = ?1
LIMIT 1
`

func (q *Queries) GetArtistByNormalizedName(ctx context.Context, normalizedName string) (Artist, error) {
	row := q.queryRow(ctx, q.getArtistByNormalizedNameStmt, getArtistByNormalizedName, normalizedName)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.DeezerID,
		&i.Name,
		&i.NormalizedName,
		&i.CreatedAt,
	)
	return i, err
}

const insertArtist = `-- name: InsertArtist :one
INSERT INTO artist (deezer_id, name, normalized_name)
VALUES (?1, ?2, ?3)
RETURNING id, deezer_id, name, normalized_name, created_at
`

type InsertArtistParams struct {
	DeezerID       sql.NullString `json:"deezer_id"`
	Name           string         `json:"name"`
	NormalizedName string         `json:"normalized_name"`
}

func (q *Queries) InsertArtist(ctx context.Context, arg InsertArtistParams) (Artist, error) {
	row := q.queryRow(ctx, q.insertArtistStmt, insertArtist, arg.DeezerID, arg.Name, arg.NormalizedName)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.DeezerID,
		&i.Name,
		&i.NormalizedName,
		&i.CreatedAt,
	)
	return i, err
}
